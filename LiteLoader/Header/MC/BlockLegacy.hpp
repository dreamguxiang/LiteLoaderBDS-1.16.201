// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Add include headers & pre-declares
class Block;
class BlockSource;
class ItemStack;

#undef BEFORE_EXTRA

class BlockLegacy {

#define AFTER_EXTRA
// Add new members to class
public:
    struct NameInfo;

    LIAPI Block* toBlock(unsigned short tileData);
    LIAPI string getTypeName();
    LIAPI bool applyBoneMeal(BlockSource*, BlockPos*);
    LIAPI ItemStack* getBlockDrops();

    inline int getBlockItemId() const{
        //ItemStackBase::init(ItemStackBase *this, const struct BlockLegacy *a2, int a3) Line14
        int id = dAccess<int>(this,134);
        if(id < 0x100u)
            return id;
        else
            return 255-id;
    };
    inline bool hasBlockEntity() const{
        // LevelChunk::_removeCallbacks Line28
        return getBlockEntityType();
    }
    inline enum BlockActorType getBlockEntityType() const{
        // LevelChunk::_removeCallbacks Line28
        return dAccess<BlockActorType>(this,168);;
    };

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BLOCKLEGACY
public:
    class BlockLegacy& operator=(class BlockLegacy const &) = delete;
    BlockLegacy(class BlockLegacy const &) = delete;
    BlockLegacy() = delete;
#endif

public:
    /*0*/ virtual ~BlockLegacy();
    /*1*/ virtual class Block const & getStateFromLegacyData(unsigned short) const;
    /*2*/ virtual class std::shared_ptr<class BlockActor> newBlockEntity(class BlockPos const &, class Block const &) const;
    /*3*/ virtual class Block const * getNextBlockPermutation(class Block const &) const;
    /*4*/ virtual bool hasTag(class BlockSource &, class BlockPos const &, class Block const &, std::string const &) const;
    /*5*/ virtual bool getCollisionShape(class AABB &, class Block const &, class BlockSource &, class BlockPos const &, class Actor *) const;
    /*6*/ virtual bool isObstructingChests(class BlockSource &, class BlockPos const &) const;
    /*7*/ virtual class Vec3 randomlyModifyPosition(class BlockPos const &, int &) const;
    /*8*/ virtual class Vec3 randomlyModifyPosition(class BlockPos const &) const;
    /*9*/ virtual void addAABBs(class Block const &, class BlockSource &, class BlockPos const &, class AABB const *, std::vector<class AABB> &) const;
    /*10*/ virtual class AABB const & getAABB(class BlockSource &, class BlockPos const &, class Block const &, class AABB &, bool) const;
    /*11*/ virtual bool addCollisionShapes(class Block const &, class BlockSource &, class BlockPos const &, class AABB const *, std::vector<class AABB> &, class Actor *) const;
    /*12*/ virtual class AABB const & getOutline(class BlockSource &, class BlockPos const &, class AABB &) const;
    /*13*/ virtual bool getLiquidClipVolume(class BlockSource &, class BlockPos const &, class AABB &) const;
    /*14*/ virtual void onProjectileHit(class BlockSource &, class BlockPos const &, class Actor const &) const;
    /*15*/ virtual bool liquidCanFlowIntoFromDirection(unsigned char, class std::function<class Block const & (class BlockPos const &)> const &, class BlockPos const &) const;
    /*16*/ virtual void __unk_vfn_16();
    /*17*/ virtual bool isStrippable(class Block const &) const;
    /*18*/ virtual class Block const & getStrippedBlock(class Block const &) const;
    /*19*/ virtual bool canProvideSupport(class Block const &, unsigned char, enum BlockSupportType) const;
    /*20*/ virtual bool canConnect(class Block const &, unsigned char, class Block const &) const;
    /*21*/ virtual void getConnectedDirections(class Block const &, class BlockPos const &, class BlockSource &, bool &, bool &, bool &, bool &) const;
    /*22*/ virtual void __unk_vfn_22();
    /*23*/ virtual void __unk_vfn_23();
    /*24*/ virtual void __unk_vfn_24();
    /*25*/ virtual bool isWaterBlocking() const;
    /*26*/ virtual void __unk_vfn_26();
    /*27*/ virtual void __unk_vfn_27();
    /*28*/ virtual void __unk_vfn_28();
    /*29*/ virtual void __unk_vfn_29();
    /*30*/ virtual void __unk_vfn_30();
    /*31*/ virtual void __unk_vfn_31();
    /*32*/ virtual void __unk_vfn_32();
    /*33*/ virtual bool isDoubleSlabBlock() const;
    /*34*/ virtual void __unk_vfn_34();
    /*35*/ virtual void __unk_vfn_35();
    /*36*/ virtual void __unk_vfn_36();
    /*37*/ virtual bool canHurtAndBreakItem() const;
    /*38*/ virtual void __unk_vfn_38();
    /*39*/ virtual void __unk_vfn_39();
    /*40*/ virtual bool isValidAuxValue(int) const;
    /*41*/ virtual bool canFillAtPos(class BlockSource &, class BlockPos const &, class Block const &) const;
    /*42*/ virtual class Block const & sanitizeFillBlock(class BlockSource &, class BlockPos const &, class Block const &) const;
    /*43*/ virtual void onFillBlock(class BlockSource &, class BlockPos const &, class Block const &) const;
    /*44*/ virtual int getDirectSignal(class BlockSource &, class BlockPos const &, int) const;
    /*45*/ virtual void __unk_vfn_45();
    /*46*/ virtual bool canContainLiquid() const;
    /*47*/ virtual bool shouldConnectToRedstone(class BlockSource &, class BlockPos const &, int) const;
    /*48*/ virtual void __unk_vfn_48();
    /*49*/ virtual bool canBeUsedInCommands(class BaseGameVersion const &) const;
    /*50*/ virtual float getThickness() const;
    /*51*/ virtual float getFlexibility(class BlockSource &, class BlockPos const &) const;
    /*52*/ virtual bool checkIsPathable(class Actor &, class BlockPos const &, class BlockPos const &) const;
    /*53*/ virtual bool shouldDispense(class BlockSource &, class Container &) const;
    /*54*/ virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char) const;
    /*55*/ virtual void transformOnFall(class BlockSource &, class BlockPos const &, class Actor *, float) const;
    /*56*/ virtual void onRedstoneUpdate(class BlockSource &, class BlockPos const &, int, bool) const;
    /*57*/ virtual void onMove(class BlockSource &, class BlockPos const &, class BlockPos const &) const;
    /*58*/ virtual void __unk_vfn_58();
    /*59*/ virtual void movedByPiston(class BlockSource &, class BlockPos const &) const;
    /*60*/ virtual void onStructureBlockPlace(class BlockSource &, class BlockPos const &) const;
    /*61*/ virtual void onStructureNeighborBlockPlace(class BlockSource &, class BlockPos const &) const;
    /*62*/ virtual void setupRedstoneComponent(class BlockSource &, class BlockPos const &) const;
    /*63*/ virtual enum BlockProperty getRedstoneProperty(class BlockSource &, class BlockPos const &) const;
    /*64*/ virtual void updateEntityAfterFallOn(class BlockPos const &, struct IActorMovementProxy &) const;
    /*65*/ virtual void __unk_vfn_65();
    /*66*/ virtual bool ignoreEntitiesOnPistonMove(class Block const &) const;
    /*67*/ virtual bool onFertilized(class BlockSource &, class BlockPos const &, class Actor *, enum FertilizerType) const;
    /*68*/ virtual bool mayConsumeFertilizer(class BlockSource &) const;
    /*69*/ virtual bool canBeFertilized(class BlockSource &, class BlockPos const &, class Block const &) const;
    /*70*/ virtual bool mayPick() const;
    /*71*/ virtual bool mayPick(class BlockSource &, class Block const &, bool) const;
    /*72*/ virtual bool mayPlace(class BlockSource &, class BlockPos const &, unsigned char) const;
    /*73*/ virtual bool mayPlace(class BlockSource &, class BlockPos const &) const;
    /*74*/ virtual bool mayPlaceOn(class BlockSource &, class BlockPos const &) const;
    /*75*/ virtual bool tryToPlace(class BlockSource &, class BlockPos const &, class Block const &, struct ActorBlockSyncMessage const *) const;
    /*76*/ virtual bool breaksFallingBlocks(class Block const &) const;
    /*77*/ virtual void destroy(class BlockSource &, class BlockPos const &, class Block const &, class Actor *) const;
    /*78*/ virtual bool playerWillDestroy(class Player &, class BlockPos const &, class Block const &) const;
    /*79*/ virtual void __unk_vfn_79();
    /*80*/ virtual void neighborChanged(class BlockSource &, class BlockPos const &, class BlockPos const &) const;
    /*81*/ virtual bool getSecondPart(class BlockSource &, class BlockPos const &, class BlockPos &) const;
    /*82*/ virtual int getResourceCount(class Random &, class Block const &, int, bool) const;
    /*83*/ virtual class ItemInstance getResourceItem(class Random &, class Block const &, int) const;
    /*84*/ virtual class ItemInstance asItemInstance(class BlockSource &, class BlockPos const &, class Block const &) const;
    /*85*/ virtual void spawnResources(class BlockSource &, class BlockPos const &, class Block const &, std::vector<class Item const *> *, float, int, bool) const;
    /*86*/ virtual void trySpawnResourcesOnExplosion(class BlockSource &, class BlockPos const &, class Block const &, std::vector<class Item const *> *, float, int, bool) const;
    /*87*/ virtual void __unk_vfn_87();
    /*88*/ virtual class Block const & getPlacementBlock(class Actor &, class BlockPos const &, unsigned char, class Vec3 const &, int) const;
    /*89*/ virtual int calcVariant(class BlockSource &, class BlockPos const &) const;
    /*90*/ virtual bool isAttachedTo(class BlockSource &, class BlockPos const &, class BlockPos &) const;
    /*91*/ virtual bool attack(class Player *, class BlockPos const &) const;
    /*92*/ virtual void handleEntityInside(class BlockSource &, class BlockPos const &, class Actor *, class Vec3 &) const;
    /*93*/ virtual void entityInside(class BlockSource &, class BlockPos const &, class Actor &) const;
    /*94*/ virtual int getExperienceDrop(class Random &) const;
    /*95*/ virtual bool canBeBuiltOver(class BlockSource &, class BlockPos const &) const;
    /*96*/ virtual void __unk_vfn_96();
    /*97*/ virtual void executeEvent(std::string const &, class RenderParams &) const;
    /*98*/ virtual void executeEvent(class BlockSource &, class BlockPos const &, class Block const &, std::string const &, class Actor &) const;
    /*99*/ virtual bool executeTrigger(class DefinitionTrigger const &, class RenderParams &) const;
    /*100*/ virtual bool executeTriggerChain(class DefinitionTrigger const &, std::vector<struct std::pair<std::string const, std::string const>> &, class RenderParams &) const;
    /*101*/ virtual void forceExecuteTrigger(class DefinitionTrigger const &, class RenderParams &) const;
    /*102*/ virtual class MobSpawnerData const * getMobToSpawn(class SpawnConditions const &, class BlockSource &) const;
    /*103*/ virtual bool shouldStopFalling(class Actor &) const;
    /*104*/ virtual void __unk_vfn_104();
    /*105*/ virtual float calcGroundFriction(class Mob &, class BlockPos const &) const;
    /*106*/ virtual void __unk_vfn_106();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual int getComparatorSignal(class BlockSource &, class BlockPos const &, class Block const &, unsigned char) const;
    /*109*/ virtual bool onDig(class Block const &, class Actor &, class ItemStack &, class BlockPos const &) const;
    /*110*/ virtual bool canSlide(class BlockSource &, class BlockPos const &) const;
    /*111*/ virtual bool canSpawnAt(class BlockSource const &, class BlockPos const &) const;
    /*112*/ virtual void notifySpawnedAt(class BlockSource &, class BlockPos const &) const;
    /*113*/ virtual int getIconYOffset() const;
    /*114*/ virtual std::string buildDescriptionId(class Block const &) const;
    /*115*/ virtual bool isAuxValueRelevantForPicking() const;
    /*116*/ virtual int getColor(class Block const &) const;
    /*117*/ virtual int getColor(class BlockSource &, class BlockPos const &, class Block const &) const;
    /*118*/ virtual int getColorAtPos(class BlockSource &, class BlockPos const &) const;
    /*119*/ virtual int getColorForParticle(class BlockSource &, class BlockPos const &, class Block const &) const;
    /*120*/ virtual bool isSeasonTinted(class Block const &, class BlockSource &, class BlockPos const &) const;
    /*121*/ virtual void onGraphicsModeChanged(struct BlockGraphicsModeChangeContext const &);
    /*122*/ virtual float getShadeBrightness(class Block const &) const;
    /*123*/ virtual class AABB const & getVisualShapeInWorld(class Block const &, class BlockSource &, class BlockPos const &, class AABB &, bool) const;
    /*124*/ virtual class AABB const & getVisualShape(class Block const &, class AABB &, bool) const;
    /*125*/ virtual class AABB const & getUIShape(class Block const &, class AABB &) const;
    /*126*/ virtual int telemetryVariant(class BlockSource &, class BlockPos const &) const;
    /*127*/ virtual int getVariant(class Block const &) const;
    /*128*/ virtual void __unk_vfn_128();
    /*129*/ virtual class Block const & getRenderBlock() const;
    /*130*/ virtual unsigned char getMappedFace(unsigned char, class Block const &) const;
    /*131*/ virtual void __unk_vfn_131();
    /*132*/ virtual enum Flip getFaceFlip(unsigned char, class Block const &) const;
    /*133*/ virtual void animateTick(class BlockSource &, class BlockPos const &, class Random &) const;
    /*134*/ virtual class BlockLegacy & init();
    /*135*/ virtual class BlockLegacy & setLightBlock(struct Brightness);
    /*136*/ virtual class BlockLegacy & setLightEmission(float);
    /*137*/ virtual class BlockLegacy & setExplodeable(float);
    /*138*/ virtual class BlockLegacy & setFlammable(class FlameOdds, class BurnOdds);
    /*139*/ virtual class BlockLegacy & setDestroyTime(float);
    /*140*/ virtual class BlockLegacy & setFriction(float);
    /*141*/ virtual class BlockLegacy & addProperty(enum BlockProperty);
    /*142*/ virtual class BlockLegacy & addState(class ItemState const &);
    /*143*/ virtual class BlockLegacy & addState(class ItemState const &, unsigned __int64);
    /*144*/ virtual class BlockLegacy & setAllowsRunes(bool);
    /*145*/ virtual class BlockLegacy & setMapColor(class mce::Color const &);
    /*146*/ virtual void __unk_vfn_146();
    /*147*/ virtual class ItemInstance getSilkTouchItemInstance(class Block const &) const;
    /*148*/ virtual void setVisualShape(class AABB const &);
    /*149*/ virtual void setVisualShape(class Vec3 const &, class Vec3 const &);
    /*150*/ virtual class Block const * tryLegacyUpgrade(unsigned short) const;
    /*151*/ virtual bool dealsContactDamage(class Actor const &, class Block const &, bool) const;
    /*152*/ virtual void onRemove(class BlockSource &, class BlockPos const &) const;
    /*153*/ virtual void onExploded(class BlockSource &, class BlockPos const &, class Actor *) const;
    /*154*/ virtual void onStandOn(class Actor &, class BlockPos const &) const;
    /*155*/ virtual void __unk_vfn_155();
    /*156*/ virtual void __unk_vfn_156();
    /*157*/ virtual void __unk_vfn_157();
    /*158*/ virtual void onPlace(class BlockSource &, class BlockPos const &) const;
    /*159*/ virtual void onFallOn(class BlockSource &, class BlockPos const &, class Actor &, float) const;
    /*160*/ virtual void playerDestroy(class Player &, class BlockPos const &, class Block const &) const;
    /*161*/ virtual void tick(class BlockSource &, class BlockPos const &, class Random &) const;
    /*162*/ virtual bool shouldRandomTick() const;
    /*163*/ virtual void __unk_vfn_163();
    /*164*/ virtual class HitResult clip(class BlockSource &, class BlockPos const &, class Vec3 const &, class Vec3 const &, bool) const;
    /*165*/ virtual bool use(class Player &, class BlockPos const &, unsigned char) const;
    /*166*/ virtual bool canSurvive(class BlockSource &, class BlockPos const &) const;
    /*167*/ virtual enum BlockRenderLayer getRenderLayer() const;
    /*168*/ virtual enum BlockRenderLayer getRenderLayer(class Block const &, class BlockSource &, class BlockPos const &) const;
    /*169*/ virtual int getExtraRenderLayers() const;
    /*170*/ virtual float getExplosionResistance(class Actor *) const;
    /*171*/ virtual struct Brightness getLightEmission(class Block const &) const;
    /*172*/ virtual class mce::Color getMapColor() const;
    /*173*/ virtual class mce::Color getMapColor(class BlockSource &, class BlockPos const &) const;
    /*174*/ virtual void __unk_vfn_174();
    /*175*/ virtual void _executeEvent(std::string const &, std::vector<struct std::pair<std::string const, std::string const>> &, class RenderParams &) const;
    /*176*/ virtual bool _executeTrigger(class DefinitionTrigger const &, std::vector<struct std::pair<std::string const, std::string const>> &, class RenderParams &) const;
    /*177*/ virtual void _forceExecuteTrigger(class DefinitionTrigger const &, std::vector<struct std::pair<std::string const, std::string const>> &, class RenderParams &) const;
    /*178*/ virtual class mce::Color getDustColor(class Block const &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_BLOCKLEGACY
    MCVAPI bool canBeOriginalSurface() const;
    MCVAPI bool canBeSilkTouched() const;
    MCVAPI bool canHaveExtraData() const;
    MCVAPI bool canSpawnOn() const;
    MCVAPI bool detachesOnPistonMove(class BlockSource &, class BlockPos const &) const;
    MCVAPI bool getIgnoresDestroyPermissions(class Actor &, class BlockPos const &) const;
    MCVAPI void handleRain(class BlockSource &, class BlockPos const &, float) const;
    MCVAPI bool hasComparatorSignal() const;
    MCVAPI bool hasVariableLighting() const;
    MCVAPI bool isBounceBlock() const;
    MCVAPI bool isButtonBlock() const;
    MCVAPI bool isContainerBlock() const;
    MCVAPI bool isCraftingBlock() const;
    MCVAPI bool isCropBlock() const;
    MCVAPI bool isDoorBlock() const;
    MCVAPI bool isFenceBlock() const;
    MCVAPI bool isFenceGateBlock() const;
    MCVAPI bool isHurtableBlock() const;
    MCVAPI bool isInteractiveBlock() const;
    MCVAPI bool isRailBlock() const;
    MCVAPI bool isSignalSource() const;
    MCVAPI bool isSlabBlock() const;
    MCVAPI bool isStairBlock() const;
    MCVAPI bool isStemBlock() const;
    MCVAPI bool isThinFenceBlock() const;
    MCVAPI bool isWallBlock() const;
    MCVAPI void onPlayerPlacing(class BlockSource &, class BlockPos const &, class Actor &, unsigned char) const;
    MCVAPI void onStepOff(class Actor &, class BlockPos const &) const;
    MCVAPI void onStepOn(class Actor &, class BlockPos const &) const;
    MCVAPI void onStructureBlockPlace(class BlockSource &, class BlockPos const &) const;
    MCVAPI bool pushesUpFallingBlocks() const;
    MCVAPI bool renderTwoFaced() const;
    MCVAPI bool spawnBurnResources(class BlockSource &, float, float, float) const;
    MCVAPI void triggerEvent(class BlockSource &, class BlockPos const &, int, int) const;
    MCVAPI bool waterSpreadCausesSpawn() const;
#endif
    MCAPI BlockLegacy(std::string const &, int, class Material const &);
    MCAPI bool addAABB(class AABB const &, class AABB const *, std::vector<class AABB> &) const;
    MCAPI class BlockLegacy & addBlockProperty(enum BlockProperty);
    MCAPI class BlockLegacy & addTag(class HashedString const &);
    MCAPI std::string buildDescriptionName(class Block const &) const;
    MCAPI void createBlockPermutations(unsigned int);
    MCAPI class WeakPtr<class BlockLegacy> createWeakPtr();
    MCAPI void forEachBlockPermutation(class std::function<bool (class Block const &)>) const;
    MCAPI void forEachItemStateInstance(class std::function<bool (class ItemStateInstance const &)>) const;
    MCAPI void getDebugText(std::vector<std::string> &, class BlockPos const &) const;
    MCAPI class Block const & getDefaultState() const;
    MCAPI bool hasState(class ItemState const &) const;
    MCAPI bool hasTag(class HashedString const &) const;
    MCAPI bool operator==(class BlockLegacy const &) const;
    MCAPI class ItemActor * popResource(class BlockSource &, class BlockPos const &, class ItemInstance const &) const;
    MCAPI class BlockLegacy & setCanBeExtraBlock(bool);
    MCAPI class BlockLegacy & setCategory(enum CreativeItemCategory);
    MCAPI class BlockLegacy & setCreativeEnumState(class ItemState const &);
    MCAPI class BlockLegacy & setCreativeGroup(std::string const &);
    MCAPI class BlockLegacy & setMinRequiredBaseGameVersion(class BaseGameVersion const &);
    MCAPI class BlockLegacy & setNameId(std::string const &);
    MCAPI class Block const * tryGetStateFromLegacyData(unsigned short) const;
    MCAPI static std::string const BLOCK_DESCRIPTION_PREFIX;
    MCAPI static float const SIZE_OFFSET;
    MCAPI static unsigned char getPlacementFacingAll(class Actor &, class BlockPos const &, float);
    MCAPI static unsigned char getPlacementFacingAllExceptAxisY(class Actor &, class BlockPos const &, float);

//protected:
    MCAPI class HitResult clip(class BlockSource &, class BlockPos const &, class Vec3 const &, class Vec3 const &, bool, class AABB const &) const;

protected:

};