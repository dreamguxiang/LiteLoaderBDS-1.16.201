// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class ExpressionNode {

#define AFTER_EXTRA

#undef AFTER_EXTRA
public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_EXPRESSIONNODE
#endif
    MCAPI ExpressionNode(class ExpressionNode &&);
    MCAPI ExpressionNode(class ExpressionNode const &);
    MCAPI ExpressionNode(class Json::Value const &, class SemVersion const &, class gsl::span<class HashedString const, -1>);
    MCAPI ExpressionNode(char const *, class SemVersion const &, class gsl::span<class HashedString const, -1>);
    MCAPI ExpressionNode(float);
    MCAPI ExpressionNode();
    MCAPI bool areAllChildrenEqual() const;
    MCAPI void clear();
    MCAPI float evalAsFloat(class RenderParams &) const;
    MCAPI struct MolangScriptArg const & evalGeneric(class RenderParams &) const;
    MCAPI std::string const getExpressionString() const;
    MCAPI std::string const & getExpressionString();
    MCAPI unsigned __int64 getTreeHash(bool) const;
    MCAPI bool getTreeString(std::string &, bool) const;
    MCAPI bool hasMadd() const;
    MCAPI enum MolangCompileResult link() const;
    MCAPI void moveConstantChildToValueIfFloatOrHashType(int);
    MCAPI class ExpressionNode & operator=(float);
    MCAPI class ExpressionNode & operator=(class ExpressionNode const &);
    MCAPI bool operator==(class ExpressionNode const &) const;
    MCAPI bool optimize();
    MCAPI bool parse(std::string const &, class SemVersion const &, class gsl::span<class HashedString const, -1>);
    MCAPI bool serialize(class Serializer &, struct SerializerTraits &);
    MCAPI void setExpressionString(std::string const &, bool);
    MCAPI bool validate(bool, int);
    MCAPI ~ExpressionNode();
    MCAPI static void addErrorMessage(std::string const &);
    MCAPI static void buildExpressionOpTable();
    MCAPI static float fast_atof_positiveOnly(char const *&);
    MCAPI static char const * getOpName(enum ExpressionOp);
    MCAPI static class std::recursive_mutex & getQueryFunctionMutex();
    MCAPI static bool initializeMolang();
    MCAPI static std::vector<struct std::pair<std::string, enum ExpressionOp>> mAliasOpTokens;
    MCAPI static std::vector<std::string> mExpressionOpTokens;
    MCAPI static class SemVersion const mLatestVersion;
    MCAPI static struct std::atomic<int> mNumRootExpressionsWithVariables;
    MCAPI static class SemVersion const mPeriodNoLongerAnIdentifierCharacterVersion;
    MCAPI static class std::function<struct MolangScriptArg const & (class RenderParams &, std::vector<class ExpressionNode> const &)> const * queryFunctionAccessorFromString(std::string const &, enum MolangQueryFunctionReturnType &, bool);
    MCAPI static enum QueryRegistrationResult registerQueryFunction(std::string const &, class std::function<struct MolangScriptArg const & (class RenderParams &, std::vector<class ExpressionNode> const &)>, std::string const &, enum MolangQueryFunctionReturnType, class HashedString, unsigned __int64, unsigned __int64, bool);

//private:
    MCAPI bool _checkIsValidAndPopulateUsedTokenFlags(struct ExpressionOpBitField const &);
    MCAPI bool _getToken(char const *&, class gsl::span<class HashedString const, -1> const &, struct ExpressionOpBitField &, class SemVersion const &);
    MCAPI bool _validateChildrenAreNumerical(bool);
    MCAPI bool buildTree(struct ExpressionOpBitField const &);
    MCAPI struct MolangScriptArg const & executeMolangProgram(class RenderParams &, struct MolangEvalParams &) const;
    MCAPI bool findClosingOp(unsigned __int64 &, enum ExpressionOp) const;
    MCAPI bool optimizeFunctionCallParams();
    MCAPI bool processArrays();
    MCAPI bool processBinaryExpression(enum ExpressionOp);
    MCAPI bool processMathFuncs();
    MCAPI bool processMemberAccessors();
    MCAPI bool processNegativesAndLogicalNots();
    MCAPI bool processQueriesAndFunctions();
    MCAPI bool processSections();
    MCAPI bool processSemicolons();
    MCAPI bool processUnaryExpression(enum ExpressionOp);
    MCAPI static enum MolangCompileResult _buildProgram(struct MolangProgramBuildState &, class ExpressionNode const *);
    MCAPI static struct MolangScriptArg * _getOrCreateReferencedMemberVariableScriptArg(struct MolangEvalParams &, class ExpressionNode const &);
    MCAPI static bool _getQueryFunctionAccessor(struct MolangScriptArg &, std::string const &, enum MolangQueryFunctionReturnType, class HashedString const &);
    MCAPI static struct MolangScriptArg const * _getReferencedMemberVariableScriptArg(struct MolangEvalParams &, class ExpressionNode const &);
    MCAPI static struct MolangScriptArg const * _getScriptArgFromMemberAccessedVariable(struct MolangEvalParams &, class ExpressionNode const &);
    MCAPI static unsigned __int64 _maxOpChildren(enum ExpressionOp);
    MCAPI static unsigned __int64 _minOpChildren(enum ExpressionOp);
    MCAPI static void _writeScriptArgToMemberAccessedVariable(struct MolangEvalParams &, class ExpressionNode const &, struct MolangScriptArg const &);
    MCAPI static void _writeScriptArgToMolangVariable(class MolangVariableMap &, enum MolangVariableIndex, struct MolangScriptArg const &);

private:
    MCAPI static class std::function<struct MolangScriptArg const & (class RenderParams &, std::vector<class ExpressionNode> const &)> _defaultUnknownQueryFunction;
    MCAPI static class ExperimentStorage mExperiments;
    MCAPI static bool mMolangInitialized;
    MCAPI static class std::unordered_map<class HashedString, struct MolangQueryFunction, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, struct MolangQueryFunction>>> mQueryFunctionAccessors;
    MCAPI static class std::unordered_map<class HashedString, class std::unordered_set<class HashedString, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<class HashedString>>, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, class std::unordered_set<class HashedString, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<class HashedString>>>>> mQuerySets;

};