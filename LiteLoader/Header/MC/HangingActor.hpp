// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class HangingActor {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_HANGINGACTOR
public:
    class HangingActor& operator=(class HangingActor const &) = delete;
    HangingActor(class HangingActor const &) = delete;
    HangingActor() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_HANGINGACTOR
    MCVAPI bool _hurt(class ActorDamageSource const &, int, bool, bool);
    MCVAPI float getBrightness(float) const;
    MCVAPI bool isInvulnerableTo(class ActorDamageSource const &) const;
    MCVAPI void move(class Vec3 const &);
    MCVAPI void normalTick();
    MCVAPI bool placeHangingEntity(class BlockSource &, int);
    MCVAPI void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    MCVAPI void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    MCVAPI void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const &);
    MCVAPI void setDir(int);
    MCVAPI void setSize(float, float);
    MCVAPI bool wouldSurvive(class BlockSource &);
#endif

//protected:
    MCAPI void _calculateAABB();
    MCAPI void _calculateActorPositionFromPlacementPosition(class BlockPos const &);
    MCAPI bool _wouldSurvive(class BlockSource &, class BlockPos const &, bool);

//private:
    MCAPI bool _canSurviveOnBlock(class BlockSource const &, class BlockPos const &, bool) const;

protected:

private:

};