// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class NetworkChunkPublisher {

#define AFTER_EXTRA
public:
    void** v;
    class Level* mLevel;
    class NetworkHandler* mNetworkHandler;
    NetworkIdentifier mOwner;
    class ClientBlobCache::Server::ActiveTransfersManager* mClientCache;
    unsigned __int8 mSubClientId;
    BlockPos mLastChunkUpdatePosition;
    unsigned int mLastChunkUpdateRadius;
    unsigned int mHandleForChunkBuildOrderUpdates;
    int mChunksSentSinceStart;
    std::unique_ptr<class ChunkViewSource> mSource;
    std::function<void __cdecl(buffer_span_mut<std::shared_ptr<class LevelChunk>>, buffer_span<unsigned int>)> mAddCallback;
    std::string mCacheSerializeBuffer;
    std::unordered_map<class ChunkPositionAndDimension, std::weak_ptr<class LevelChunk>> mQueuedChunks;
#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_NETWORKCHUNKPUBLISHER
public:
    class NetworkChunkPublisher& operator=(class NetworkChunkPublisher const &) = delete;
    NetworkChunkPublisher(class NetworkChunkPublisher const &) = delete;
    NetworkChunkPublisher() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_NETWORKCHUNKPUBLISHER
#endif
    MCAPI void clearRegion();
    MCAPI void moveRegion(class BlockPos const &, unsigned int, class Vec3 const &, float);
    MCAPI void prepareRegion(class ChunkSource &, class ChunkPos &);
    MCAPI void sendQueuedChunks();

//private:
    MCAPI bool _sendQueuedChunk(class ChunkPos const &, class ClientBlobCache::Server::TransferBuilder *);
    MCAPI void _serializeAndCache(class LevelChunkPacket &, class ClientBlobCache::Server::TransferBuilder &, class std::function<void (class VarIntDataOutput &)> &&);

private:

};