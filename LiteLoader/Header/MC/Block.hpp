// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Add include headers & pre-declares
#include "CompoundTag.hpp"
#include "BlockLegacy.hpp"
#undef BEFORE_EXTRA

class __declspec(align(8)) Block {


public:
    unsigned __int16 mAux;
    gsl::not_null<BlockLegacy*> mLegacyBlock;
    CompoundTag mSerializationId;
    unsigned int mRuntimeId;
    bool mHasRuntimeId;
    OwnerPtrT<EntityRefTraits> mEntity;
    std::vector<HashedString> mTags;

public:
    LIAPI static Block* create(const string& str, unsigned short tileData);
    LIAPI static Block* create(CompoundTag* nbt);

    LIAPI string getTypeName() const;
    LIAPI int getId() const;
    LIAPI unsigned short getTileData();
    LIAPI std::unique_ptr<CompoundTag> getNbt();
    LIAPI bool setNbt(CompoundTag* nbt);
    LIAPI unsigned int const & getRuntimeId() const;

    inline bool hasBlockEntity(){
        return getLegacyBlock().hasBlockEntity();
    }
    inline enum class BlockActorType getBlockEntityType() const{
        return getLegacyBlock().getBlockEntityType();
    };

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BLOCK
public:
    class Block& operator=(class Block const &) = delete;
    Block(class Block const &) = delete;
    Block() = delete;
#endif

public:
    /*0*/ virtual ~Block();
    /*1*/ virtual enum class BlockRenderLayer getRenderLayer() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_BLOCK
#endif
    MCAPI bool canSurvive(class BlockSource &, class BlockPos const &) const;
    MCAPI bool checkIsPathable(class Actor &, class BlockPos const &, class BlockPos const &) const;
    MCAPI class HitResult clip(class BlockSource &, class BlockPos const &, class Vec3 const &, class Vec3 const &, bool, class AABB const &) const;
    MCAPI class HitResult clip(class BlockSource &, class BlockPos const &, class Vec3 const &, class Vec3 const &, bool) const;
    MCAPI class Block const & copyState(class Block const &, class ItemState const &) const;
    MCAPI void destroy(class BlockSource &, class BlockPos const &, class Actor *) const;
    MCAPI void executeItemEvent(class ItemStackBase &, std::string const &, class BlockSource &, class BlockPos const &, class Actor *) const;
    MCAPI class AABB const & getAABB(class BlockSource &, class BlockPos const &, class AABB &, bool) const;
    MCAPI class ItemState const * getBlockState(class HashedString const &) const;
    MCAPI enum class CreativeItemCategory getCreativeCategory() const;
    MCAPI std::string getDescriptionId() const;
    MCAPI float getDestroySpeed() const;
    MCAPI float getFriction() const;
    MCAPI class BlockLegacy const & getLegacyBlock() const;
    MCAPI struct Brightness getLight() const;
    MCAPI struct Brightness getLightEmission() const;
    MCAPI class mce::Color getMapColor(class BlockSource &, class BlockPos const &) const;
    MCAPI class HashedString const & getName() const;
    MCAPI float getThickness() const;
    MCAPI bool hasProperty(enum class BlockProperty) const;
    MCAPI bool hasState(class ItemState const &) const;
    MCAPI bool hasTag(unsigned __int64 const &) const;
    MCAPI bool hasTag(class HashedString const &) const;
    MCAPI bool isCropBlock() const;
    MCAPI bool isDoorBlock() const;
    MCAPI bool isMotionBlockingBlock() const;
    MCAPI bool isSlabBlock() const;
    MCAPI bool isSolid() const;
    MCAPI bool isSolidBlockingBlock() const;
    MCAPI bool isSolidBlockingBlockAndNotSignalSource() const;
    MCAPI bool isStandingSign() const;
    MCAPI class Block const & keepState(class ItemState const &) const;
    MCAPI bool mayPlace(class BlockSource &, class BlockPos const &, unsigned char) const;
    MCAPI void neighborChanged(class BlockSource &, class BlockPos const &, class BlockPos const &) const;
    MCAPI void onFallOn(class BlockSource &, class BlockPos const &, class Actor &, float) const;
    MCAPI bool onFertilized(class BlockSource &, class BlockPos const &, class Actor *, enum class FertilizerType) const;
    MCAPI void onPlace(class BlockSource &, class BlockPos const &, class Block const &) const;
    MCAPI void onPlayerPlacing(class BlockSource &, class BlockPos const &, class Actor &, unsigned char) const;
    MCAPI void onStepOff(class Actor &, class BlockPos const &) const;
    MCAPI void onStepOn(class Actor &, class BlockPos const &) const;
    MCAPI bool operator!=(class Block const &) const;
    MCAPI bool operator==(class Block const &) const;
    MCAPI void playerDestroy(class Player &, class BlockPos const &) const;
    MCAPI void queuedTick(class BlockSource &, class BlockPos const &, class Random &) const;
    MCAPI void randomTick(class BlockSource &, class BlockPos const &, class Random &) const;
    MCAPI bool shouldRandomTick() const;
    MCAPI void spawnResources(class BlockSource &, class BlockPos const &, std::vector<class Item const *> *, float, int, bool) const;
    MCAPI void spawnResources(class BlockSource &, class BlockPos const &, class Block const &, std::vector<class Item const *> *, float, int, bool) const;
    MCAPI std::string toDebugString() const;
    MCAPI bool use(class Player &, class BlockPos const &, unsigned char) const;
    MCAPI static std::string const BLOCK_DESCRIPTION_PREFIX;

//protected:
    MCAPI void buildSerializationId(unsigned int);
    MCAPI void tickInternal(class BlockSource &, class BlockPos const &, class Random &) const;

protected:

};

//static_assert(sizeof(Block) == 0x68);