// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class TridentItem : public Item {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_TRIDENTITEM
public:
    class TridentItem& operator=(class TridentItem const &) = delete;
    TridentItem(class TridentItem const &) = delete;
    TridentItem() = delete;
#endif

public:
    /*0*/ virtual ~TridentItem();
    /*5*/ virtual void __unk_vfn_5();
    /*10*/ virtual void __unk_vfn_10();
    /*16*/ virtual void __unk_vfn_16();
    /*18*/ virtual bool isThrowable() const;
    /*39*/ virtual short getMaxDamage() const;
    /*40*/ virtual int getAttackDamage() const;
    /*43*/ virtual void __unk_vfn_43();
    /*45*/ virtual void __unk_vfn_45();
    /*47*/ virtual bool canDestroyInCreative() const;
    /*52*/ virtual void appendFormattedHovertext(class ItemStackBase const &, class Level &, std::string &, bool) const;
    /*54*/ virtual int getEnchantSlot() const;
    /*55*/ virtual int getEnchantValue() const;
    /*57*/ virtual void __unk_vfn_57();
    /*60*/ virtual void __unk_vfn_60();
    /*61*/ virtual void __unk_vfn_61();
    /*62*/ virtual void __unk_vfn_62();
    /*65*/ virtual void __unk_vfn_65();
    /*69*/ virtual void __unk_vfn_69();
    /*70*/ virtual void __unk_vfn_70();
    /*72*/ virtual void __unk_vfn_72();
    /*73*/ virtual void __unk_vfn_73();
    /*76*/ virtual class ItemStack & use(class ItemStack &, class Player &) const;
    /*77*/ virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char) const;
    /*79*/ virtual void releaseUsing(class ItemStack &, class Player *, int) const;
    /*81*/ virtual void hurtActor(class ItemStack &, class Actor &, class Mob &) const;
    /*101*/ virtual void __unk_vfn_101();
    /*102*/ virtual void __unk_vfn_102();
    /*117*/ virtual void __unk_vfn_117();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_TRIDENTITEM
#endif
    MCAPI static int const CHARGE_THRESHOLD_TIME;
    MCAPI static int const THROW_THRESHOLD_TIME;

//private:
    MCAPI class Actor * _setupProjectile(class Actor *, class ItemStack, bool) const;

private:

};