// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "JsonUtil.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class ComponentItem : public Item {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_COMPONENTITEM
public:
    class ComponentItem& operator=(class ComponentItem const &) = delete;
    ComponentItem(class ComponentItem const &) = delete;
    ComponentItem() = delete;
#endif

public:
    /*0*/ virtual ~ComponentItem();
    /*1*/ virtual bool initServer(class Json::Value &);
    /*2*/ virtual void tearDown();
    /*5*/ virtual void __unk_vfn_5();
    /*6*/ virtual void executeEvent(class ItemStackBase &, std::string const &, class RenderParams &) const;
    /*7*/ virtual bool isComponentBased() const;
    /*8*/ virtual bool isArmor() const;
    /*9*/ virtual bool isBlockPlanterItem() const;
    /*10*/ virtual void __unk_vfn_10();
    /*12*/ virtual bool isDamageable() const;
    /*13*/ virtual bool isDyeable() const;
    /*14*/ virtual bool isDye() const;
    /*16*/ virtual void __unk_vfn_16();
    /*17*/ virtual bool isFood() const;
    /*18*/ virtual bool isThrowable() const;
    /*19*/ virtual bool isUseable() const;
    /*21*/ virtual class IFoodItemComponent * getFood() const;
    /*22*/ virtual class FuelItemComponent * getFuel() const;
    /*25*/ virtual class Item & setMaxDamage(int);
    /*34*/ virtual enum BlockShape getBlockShape() const;
    /*35*/ virtual bool canBeDepleted() const;
    /*36*/ virtual bool canDestroySpecial(class Block const &) const;
    /*37*/ virtual int getLevelDataForAuxValue(int) const;
    /*39*/ virtual short getMaxDamage() const;
    /*40*/ virtual int getAttackDamage() const;
    /*42*/ virtual bool isGlint(class ItemStackBase const &) const;
    /*43*/ virtual void __unk_vfn_43();
    /*45*/ virtual void __unk_vfn_45();
    /*47*/ virtual bool canDestroyInCreative() const;
    /*48*/ virtual bool isDestructive(int) const;
    /*49*/ virtual bool isLiquidClipItem(int) const;
    /*51*/ virtual bool requiresInteract() const;
    /*52*/ virtual void appendFormattedHovertext(class ItemStackBase const &, class Level &, std::string &, bool) const;
    /*53*/ virtual bool isValidRepairItem(class ItemStackBase const &, class ItemStackBase const &) const;
    /*54*/ virtual int getEnchantSlot() const;
    /*55*/ virtual int getEnchantValue() const;
    /*56*/ virtual int getArmorValue() const;
    /*57*/ virtual void __unk_vfn_57();
    /*58*/ virtual bool isValidAuxValue(int) const;
    /*59*/ virtual int getDamageChance(int) const;
    /*60*/ virtual void __unk_vfn_60();
    /*61*/ virtual void __unk_vfn_61();
    /*62*/ virtual void __unk_vfn_62();
    /*63*/ virtual class mce::Color getColor(class CompoundTag const *, class ItemDescriptor const &) const;
    /*65*/ virtual void __unk_vfn_65();
    /*66*/ virtual void clearColor(class ItemStackBase &) const;
    /*68*/ virtual void setColor(class ItemStackBase &, class mce::Color const &) const;
    /*69*/ virtual void __unk_vfn_69();
    /*70*/ virtual void __unk_vfn_70();
    /*72*/ virtual void __unk_vfn_72();
    /*73*/ virtual void __unk_vfn_73();
    /*76*/ virtual class ItemStack & use(class ItemStack &, class Player &) const;
    /*77*/ virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char) const;
    /*78*/ virtual enum ItemUseMethod useTimeDepleted(class ItemStack &, class Level *, class Player *) const;
    /*79*/ virtual void releaseUsing(class ItemStack &, class Player *, int) const;
    /*80*/ virtual float getDestroySpeed(class ItemStackBase const &, class Block const &) const;
    /*81*/ virtual void hurtActor(class ItemStack &, class Actor &, class Mob &) const;
    /*82*/ virtual void hitActor(class ItemStack &, class Actor &, class Mob &) const;
    /*83*/ virtual void hitBlock(class ItemStack &, class Block const &, class BlockPos const &, class Mob &) const;
    /*84*/ virtual bool mineBlock(class ItemInstance &, class Block const &, int, int, int, class Actor *) const;
    /*85*/ virtual bool mineBlock(class ItemStack &, class Block const &, int, int, int, class Actor *) const;
    /*86*/ virtual std::string buildDescriptionName(class ItemStackBase const &) const;
    /*87*/ virtual std::string buildDescriptionId(class ItemDescriptor const &, class CompoundTag const *) const;
    /*88*/ virtual std::string buildEffectDescriptionName(class ItemStackBase const &) const;
    /*92*/ virtual unsigned char getMaxStackSize(class ItemDescriptor const &) const;
    /*95*/ virtual std::string const & getCooldownType() const;
    /*96*/ virtual int getCooldownTime() const;
    /*101*/ virtual void __unk_vfn_101();
    /*102*/ virtual void __unk_vfn_102();
    /*105*/ virtual void initClient(class Json::Value &, class Json::Value &);
    /*106*/ virtual std::string getInteractText(class Player const &) const;
    /*107*/ virtual int getAnimationFrameFor(class Mob *, bool, class ItemStack const *, bool) const;
    /*108*/ virtual bool isEmissive(int) const;
    /*110*/ virtual struct TextureUVCoordinateSet const & getIcon(class ItemStackBase const &, int, bool) const;
    /*115*/ virtual bool canBeCharged() const;
    /*117*/ virtual void __unk_vfn_117();
    /*120*/ virtual std::string getAuxValuesDescription() const;
    /*121*/ virtual bool _checkUseOnPermissions(class Actor &, class ItemStackBase &, unsigned char const &, class BlockPos const &) const;
    /*122*/ virtual bool _calculatePlacePos(class ItemStackBase &, class Actor &, unsigned char &, class BlockPos &) const;
    /*123*/ virtual bool _useOn(class ItemStack &, class Actor &, class BlockPos, unsigned char, float, float, float) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_COMPONENTITEM
    MCVAPI int getVariant(int, int, bool) const;
    MCVAPI bool hasCustomColor(class ItemStackBase const &) const;
    MCVAPI bool useVariant(int, int, bool) const;
#endif
    MCAPI void _addCerealItemsToMap();
    MCAPI class std::shared_ptr<class JsonUtil::JsonSchemaObjectNode<class JsonUtil::EmptyClass, class ComponentItem>> _buildItemsFileSchema(class std::shared_ptr<class JsonUtil::JsonSchemaObjectNode<class JsonUtil::EmptyClass, class ComponentItem>> &, bool, class SemVersion);
    MCAPI bool _validateClientSchemaAndInitItem(class Json::Value &);
    MCAPI bool _validateServerSchemaAndInitItem(class Json::Value &);
    MCAPI std::unique_ptr<class CompoundTag> buildNetworkTag() const;
    MCAPI bool executeTrigger(class ItemStackBase &, class DefinitionTrigger const &, class RenderParams &) const;
    MCAPI class ItemComponent * getComponent(class HashedString const &) const;
    MCAPI bool parseJsonEvents(class Json::Value const &);
    MCAPI static void registerItemComponentTypes();

//private:
    MCAPI std::unique_ptr<class CompoundTag> _buildItemProperitesNetworkTag() const;
    MCAPI bool _doesNotTakeDurabilityDamage() const;
    MCAPI void _executeEvent(class ItemStackBase &, std::string const &, std::vector<struct std::pair<std::string const, std::string const>> &, class RenderParams &) const;
    MCAPI bool _forceExecuteTrigger(class ItemStackBase &, class DefinitionTrigger const &, std::vector<struct std::pair<std::string const, std::string const>> &, class RenderParams &) const;

private:

};