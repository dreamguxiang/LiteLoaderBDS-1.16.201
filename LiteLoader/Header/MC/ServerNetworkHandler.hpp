// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Bedrock.hpp"
#include "Automation.hpp"

#define BEFORE_EXTRA

enum SubClientId;

#undef BEFORE_EXTRA

class ServerNetworkHandler {

#define AFTER_EXTRA
// Add Member There


public:
    inline void onClientAuthenticated(class NetworkIdentifier const& a0, class Certificate const& a1)
    {
       return _onClientAuthenticated(a0, a1);
    }

    inline class ServerPlayer* getServerPlayer(class NetworkIdentifier const& a0, char a1=0) {
        return _getServerPlayer(a0, (SubClientId)a1);
    }

    inline int getActiveAndInProgressPlayerCount(class mce::UUID a1)
    {
        return _getActiveAndInProgressPlayerCount(a1);
    }

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SERVERNETWORKHANDLER
public:
    class ServerNetworkHandler& operator=(class ServerNetworkHandler const &) = delete;
    ServerNetworkHandler(class ServerNetworkHandler const &) = delete;
    ServerNetworkHandler() = delete;
#endif

public:

    MCVAPI bool allowIncomingPacketId(class NetworkIdentifier const &, enum MinecraftPacketIds);
    MCVAPI class GameSpecificNetEventCallback * getGameSpecificNetEventCallback();
    MCVAPI void handle(class NetworkIdentifier const &, class UpdatePlayerGameTypePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class PhotoTransferPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class ModalFormResponsePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class PurchaseReceiptPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class CompletedUsingItemPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class BookEditPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class NpcRequestPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class TextPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class MultiplayerSettingsPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class CommandRequestPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class CommandBlockUpdatePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class SpawnExperienceOrbPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class RequestChunkRadiusPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class MapCreateLockedCopyPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class MapInfoRequestPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class AdventureSettingsPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class ShowCreditsPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class ResourcePackChunkRequestPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class BossEventPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class StructureBlockUpdatePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class BlockPickRequestPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class ActorPickRequestPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class SetDifficultyPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class NetworkStackLatencyPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class SetLocalPlayerAsInitializedPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class StructureTemplateDataRequestPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class SettingsCommandPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class EmoteListPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class EmotePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class FilterTextPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class RespawnPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class LabTablePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class LoginPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class SubClientLoginPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class DisconnectPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class AnvilDamagePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class ClientCacheStatusPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class ClientCacheBlobStatusPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class ClientToServerHandshakePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class MovePlayerPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class RiderJumpPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class TickSyncPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class MobEquipmentPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class MoveActorAbsolutePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class InteractPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class AnimatePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class ActorEventPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class PlayerActionPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class ItemFrameDropItemPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class ItemStackRequestPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class ContainerClosePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class InventoryTransactionPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class PlayerHotbarPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class CraftingEventPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class DebugInfoPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class std::shared_ptr<class BlockActorDataPacket>);
    MCVAPI void handle(class NetworkIdentifier const &, class PlayerAuthInputPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class PlayerInputPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class SetPlayerGameTypePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class SetDefaultGameTypePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class LevelSoundEventPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class LevelSoundEventPacketV2 const &);
    MCVAPI void handle(class NetworkIdentifier const &, class LevelSoundEventPacketV1 const &);
    MCVAPI void handle(class NetworkIdentifier const &, class SimpleEventPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class PlayerSkinPacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class LecternUpdatePacket const &);
    MCVAPI void handle(class NetworkIdentifier const &, class PositionTrackingDBClientRequestPacket const &);
    MCVAPI void onDisconnect(class NetworkIdentifier const &, std::string const &, bool, std::string const &);
    MCVAPI void onInvalidPlayerJoinedLobby(class mce::UUID const &, std::string const &);
    MCVAPI void onPlayerReady(class Player &);
    MCVAPI void onTick();
    MCVAPI void onTransferRequest(class NetworkIdentifier const &, std::string const &, int);
    MCVAPI void onWebsocketRequest(std::string const &, std::string const &, class std::function<void (void)>);
    MCVAPI void onXboxUserBlocked(std::string const &);
    MCVAPI void onXboxUserUnblocked(std::string const &);
    MCVAPI void sendServerLegacyParticle(enum ParticleType, class Vec3 const &, class Vec3 const &, int);

    MCAPI ServerNetworkHandler(class GameCallbacks &, class Level &, class NetworkHandler &, class PrivateKeyManager &, class ServerLocator &, class PacketSender &, class AllowList &, class PermissionsFile *, class mce::UUID const &, int, bool, std::vector<std::string> const &, std::string, int, class MinecraftCommands &, class IMinecraftApp &, class std::unordered_map<struct PackIdVersion, std::string, struct std::hash<struct PackIdVersion>, struct std::equal_to<struct PackIdVersion>, class std::allocator<struct std::pair<struct PackIdVersion const, std::string>>> const &, class Scheduler &, class Bedrock::NonOwnerPointer<class TextFilteringProcessor>);
    MCAPI void allowIncomingConnections(std::string const &, bool);
    MCAPI std::unique_ptr<class ServerPlayer> createNewPlayer(class NetworkIdentifier const &, class ConnectionRequest const &);
    MCAPI void disallowIncomingConnections();
    MCAPI void disconnectClient(class NetworkIdentifier const &, unsigned char, std::string const &, bool);
    MCAPI void engineDownloadingFinishedResponseHelper(class NetworkIdentifier const &, class ResourcePackClientResponsePacket const &);
    MCAPI void onReady_ClientGeneration(class Player &, class NetworkIdentifier const &);
    MCAPI void removeFromDenyList(class mce::UUID const &, std::string const &);
    MCAPI void sendLoginMessageLocal(class NetworkIdentifier const &, class ConnectionRequest const &, class ServerPlayer &);
    MCAPI void setAutomationClient(class Automation::AutomationClient *);
    MCAPI bool trytLoadPlayer(class ServerPlayer &, class ConnectionRequest const &);
    MCAPI void updateServerAnnouncement();

//private:
    MCAPI class ServerPlayer & _createNewPlayer(class NetworkIdentifier const &, class SubClientConnectionRequest const &, unsigned char);
    MCAPI void _displayGameMessage(class Player const &, std::string const &);
    MCAPI int _getActiveAndInProgressPlayerCount(class mce::UUID) const;
    MCAPI std::string _getDisplayName(class Certificate const &, bool, std::string const &) const;
    MCAPI class ServerPlayer * _getServerPlayer(class NetworkIdentifier const &, unsigned char);
    MCAPI bool _loadNewPlayer(class ServerPlayer &, bool);
    MCAPI void _onClientAuthenticated(class NetworkIdentifier const &, class Certificate const &);
    MCAPI void _onPlayerLeft(class ServerPlayer *, bool);
    MCAPI void _onSubClientAuthenticated(class NetworkIdentifier const &, class Certificate const &, class SubClientLoginPacket const &);
    MCAPI void _sendAdditionalLevelData(class ServerPlayer &, class NetworkIdentifier const &);
    MCAPI void _sendLevelData(class ServerPlayer &, class NetworkIdentifier const &);

private:

};