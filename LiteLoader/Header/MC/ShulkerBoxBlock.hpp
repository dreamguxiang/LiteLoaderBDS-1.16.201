// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "ChestBlock.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class ShulkerBoxBlock : public ChestBlock {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SHULKERBOXBLOCK
public:
    class ShulkerBoxBlock& operator=(class ShulkerBoxBlock const &) = delete;
    ShulkerBoxBlock(class ShulkerBoxBlock const &) = delete;
    ShulkerBoxBlock() = delete;
#endif

public:
    /*0*/ virtual ~ShulkerBoxBlock();
    /*4*/ virtual void __unk_vfn_4();
    /*7*/ virtual void __unk_vfn_7();
    /*10*/ virtual class AABB const & getAABB(class BlockSource &, class BlockPos const &, class Block const &, class AABB &, bool) const;
    /*15*/ virtual void __unk_vfn_15();
    /*16*/ virtual void __unk_vfn_16();
    /*17*/ virtual void __unk_vfn_17();
    /*18*/ virtual void __unk_vfn_18();
    /*22*/ virtual void __unk_vfn_22();
    /*23*/ virtual void __unk_vfn_23();
    /*24*/ virtual void __unk_vfn_24();
    /*26*/ virtual void __unk_vfn_26();
    /*27*/ virtual void __unk_vfn_27();
    /*28*/ virtual void __unk_vfn_28();
    /*29*/ virtual void __unk_vfn_29();
    /*30*/ virtual void __unk_vfn_30();
    /*31*/ virtual void __unk_vfn_31();
    /*32*/ virtual void __unk_vfn_32();
    /*33*/ virtual void __unk_vfn_33();
    /*34*/ virtual void __unk_vfn_34();
    /*35*/ virtual void __unk_vfn_35();
    /*36*/ virtual void __unk_vfn_36();
    /*38*/ virtual void __unk_vfn_38();
    /*39*/ virtual void __unk_vfn_39();
    /*40*/ virtual void __unk_vfn_40();
    /*41*/ virtual void __unk_vfn_41();
    /*43*/ virtual void __unk_vfn_43();
    /*44*/ virtual void __unk_vfn_44();
    /*45*/ virtual void __unk_vfn_45();
    /*47*/ virtual void __unk_vfn_47();
    /*48*/ virtual void __unk_vfn_48();
    /*51*/ virtual void __unk_vfn_51();
    /*53*/ virtual void __unk_vfn_53();
    /*54*/ virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char) const;
    /*55*/ virtual void __unk_vfn_55();
    /*56*/ virtual void __unk_vfn_56();
    /*58*/ virtual void __unk_vfn_58();
    /*59*/ virtual void __unk_vfn_59();
    /*60*/ virtual void __unk_vfn_60();
    /*61*/ virtual void __unk_vfn_61();
    /*62*/ virtual void setupRedstoneComponent(class BlockSource &, class BlockPos const &) const;
    /*65*/ virtual void __unk_vfn_65();
    /*66*/ virtual void __unk_vfn_66();
    /*67*/ virtual void __unk_vfn_67();
    /*68*/ virtual void __unk_vfn_68();
    /*69*/ virtual void __unk_vfn_69();
    /*71*/ virtual void __unk_vfn_71();
    /*73*/ virtual void __unk_vfn_73();
    /*74*/ virtual void __unk_vfn_74();
    /*77*/ virtual void __unk_vfn_77();
    /*78*/ virtual bool playerWillDestroy(class Player &, class BlockPos const &, class Block const &) const;
    /*79*/ virtual void __unk_vfn_79();
    /*83*/ virtual class ItemInstance getResourceItem(class Random &, class Block const &, int) const;
    /*84*/ virtual class ItemInstance asItemInstance(class BlockSource &, class BlockPos const &, class Block const &) const;
    /*85*/ virtual void spawnResources(class BlockSource &, class BlockPos const &, class Block const &, std::vector<class Item const *> *, float, int, bool) const;
    /*87*/ virtual void __unk_vfn_87();
    /*88*/ virtual class Block const & getPlacementBlock(class Actor &, class BlockPos const &, unsigned char, class Vec3 const &, int) const;
    /*90*/ virtual void __unk_vfn_90();
    /*91*/ virtual void __unk_vfn_91();
    /*92*/ virtual void __unk_vfn_92();
    /*93*/ virtual void __unk_vfn_93();
    /*94*/ virtual void __unk_vfn_94();
    /*104*/ virtual void __unk_vfn_104();
    /*106*/ virtual void __unk_vfn_106();
    /*107*/ virtual void __unk_vfn_107();
    /*111*/ virtual void __unk_vfn_111();
    /*112*/ virtual void __unk_vfn_112();
    /*113*/ virtual void __unk_vfn_113();
    /*115*/ virtual void __unk_vfn_115();
    /*116*/ virtual void __unk_vfn_116();
    /*117*/ virtual int getColor(class Block const &) const;
    /*118*/ virtual void __unk_vfn_118();
    /*119*/ virtual int getColorForParticle(class BlockSource &, class BlockPos const &, class Block const &) const;
    /*120*/ virtual void __unk_vfn_120();
    /*128*/ virtual void __unk_vfn_128();
    /*131*/ virtual void __unk_vfn_131();
    /*132*/ virtual void __unk_vfn_132();
    /*146*/ virtual void __unk_vfn_146();
    /*147*/ virtual void __unk_vfn_147();
    /*150*/ virtual void __unk_vfn_150();
    /*151*/ virtual void __unk_vfn_151();
    /*153*/ virtual void __unk_vfn_153();
    /*154*/ virtual void __unk_vfn_154();
    /*155*/ virtual void __unk_vfn_155();
    /*156*/ virtual void __unk_vfn_156();
    /*157*/ virtual void __unk_vfn_157();
    /*161*/ virtual void __unk_vfn_161();
    /*163*/ virtual void __unk_vfn_163();
    /*166*/ virtual void __unk_vfn_166();
    /*169*/ virtual void __unk_vfn_169();
    /*172*/ virtual class mce::Color getMapColor(class BlockSource &, class BlockPos const &) const;
    /*173*/ virtual void __unk_vfn_173();
    /*174*/ virtual void __unk_vfn_174();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SHULKERBOXBLOCK
    MCVAPI bool isAuxValueRelevantForPicking() const;
#endif
    MCAPI ShulkerBoxBlock(std::string const &, int);

//protected:
    MCAPI void spawnBoxInstance(class BlockSource &, class Level &, class BlockPos const &, class Block const &, std::string const &, std::unique_ptr<class CompoundTag>, int) const;

protected:

};