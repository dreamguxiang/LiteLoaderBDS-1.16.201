// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Mob.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class Agent : public Mob {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_AGENT
public:
    class Agent& operator=(class Agent const &) = delete;
    Agent(class Agent const &) = delete;
    Agent() = delete;
#endif

public:
    /*3*/ virtual void initializeComponents(enum class Actor::InitializationMethod, class VariantParameterList const &);
    /*7*/ virtual ~Agent();
    /*32*/ virtual void __unk_vfn_32();
    /*34*/ virtual void teleportTo(class Vec3 const &, bool, int, int, struct ActorUniqueID const &);
    /*40*/ virtual void normalTick();
    /*53*/ virtual bool isInvisible() const;
    /*54*/ virtual bool canShowNameTag() const;
    /*55*/ virtual void __unk_vfn_55();
    /*59*/ virtual std::string getFormattedNameTag() const;
    /*62*/ virtual void __unk_vfn_62();
    /*77*/ virtual void __unk_vfn_77();
    /*82*/ virtual void __unk_vfn_82();
    /*88*/ virtual bool isPickable();
    /*89*/ virtual void __unk_vfn_89();
    /*91*/ virtual void __unk_vfn_91();
    /*98*/ virtual void __unk_vfn_98();
    /*100*/ virtual void __unk_vfn_100();
    /*101*/ virtual void __unk_vfn_101();
    /*102*/ virtual void __unk_vfn_102();
    /*123*/ virtual void __unk_vfn_123();
    /*134*/ virtual void handleEntityEvent(enum class ActorEvent, int);
    /*153*/ virtual void setCarriedItem(class ItemStack const &);
    /*171*/ virtual void __unk_vfn_171();
    /*182*/ virtual bool canBePulledIntoVehicle() const;
    /*184*/ virtual void __unk_vfn_184();
    /*199*/ virtual bool canBeAffected(class MobEffectInstance const &) const;
    /*208*/ virtual void __unk_vfn_208();
    /*209*/ virtual void __unk_vfn_209();
    /*214*/ virtual bool isWorldBuilder();
    /*216*/ virtual bool isAdventure() const;
    /*230*/ virtual void __unk_vfn_230();
    /*233*/ virtual void __unk_vfn_233();
    /*234*/ virtual void kill();
    /*238*/ virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    /*241*/ virtual void __unk_vfn_241();
    /*243*/ virtual bool _hurt(class ActorDamageSource const &, int, bool, bool);
    /*249*/ virtual void __unk_vfn_249();
    /*260*/ virtual void __unk_vfn_260();
    /*277*/ virtual void travel(float, float, float);
    /*281*/ virtual void aiStep();
    /*294*/ virtual void __unk_vfn_294();
    /*304*/ virtual void __unk_vfn_304();
    /*330*/ virtual bool createAIGoals();
    /*337*/ virtual bool canExistWhenDisallowMob() const;
    /*338*/ virtual void __unk_vfn_338();
    /*343*/ virtual std::unique_ptr<class BodyControl> initBodyControl();
    /*354*/ virtual void __unk_vfn_354();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_AGENT
    MCVAPI bool breaksFallingBlocks() const;
    MCVAPI bool getAlwaysShowNameTag() const;
    MCVAPI bool interactPreventDefault();
    MCVAPI bool isTargetable() const;
    MCVAPI void knockback(class Actor *, int, float, float, float, float, float);
#endif
    MCAPI Agent(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &);
    MCAPI void setNameTagFromOwner(class Player const &);
    MCAPI static class Vec3 roundTeleportPos(class Vec3 const &);

};