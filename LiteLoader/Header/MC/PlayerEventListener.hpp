// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class PlayerEventListener {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PLAYEREVENTLISTENER
public:
    class PlayerEventListener& operator=(class PlayerEventListener const &) = delete;
    PlayerEventListener(class PlayerEventListener const &) = delete;
    PlayerEventListener() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_PLAYEREVENTLISTENER
    MCVAPI enum class EventResult onCameraSetPlayerRot(class Player &, class Camera const &);
    MCVAPI enum class EventResult onLocalPlayerDeath(class IClientInstance &, class LocalPlayer &);
    MCVAPI enum class EventResult onLocalPlayerRespawn(class IClientInstance &, class LocalPlayer &);
    MCVAPI enum class EventResult onPlayerAIStepBegin(class Player &);
    MCVAPI enum class EventResult onPlayerAction(class Player &, enum class PlayerActionType, class BlockPos const &, int);
    MCVAPI enum class EventResult onPlayerAttackedActor(class Player &, class Actor &);
    MCVAPI enum class EventResult onPlayerAuthInputApplied(class Player &, class PlayerAuthInputPacket const &);
    MCVAPI enum class EventResult onPlayerAuthInputReceived(class Player &, class PlayerAuthInputPacket const &);
    MCVAPI enum class EventResult onPlayerAwardAchievement(class Player &, enum class MinecraftEventing::AchievementIds);
    MCVAPI enum class EventResult onPlayerCaravanChanged(class Actor const &, int);
    MCVAPI enum class EventResult onPlayerCraftedItem(class Player &, class ItemInstance const &, bool, bool, bool, int, int, int, bool, bool, std::vector<short> const &);
    MCVAPI enum class EventResult onPlayerCreated(class LocalPlayer &, std::string const &, std::string const &, bool);
    MCVAPI enum class EventResult onPlayerDestroyedBlock(class Player &, class BlockLegacy const &);
    MCVAPI enum class EventResult onPlayerDestroyedBlock(class Player &, int, int, int);
    MCVAPI enum class EventResult onPlayerEnchantedItem(class Player &, class ItemStack const &, class ItemEnchants const &);
    MCVAPI enum class EventResult onPlayerEquippedArmor(class Player &, class ItemDescriptor const &);
    MCVAPI enum class EventResult onPlayerHurt(class Player &, class ActorDamageSource &);
    MCVAPI enum class EventResult onPlayerInput(struct IPlayerMovementProxy &, class MoveInputHandler &);
    MCVAPI enum class EventResult onPlayerItemEquipped(class Player &, class ItemInstance const &, int);
    MCVAPI enum class EventResult onPlayerItemPlaceInteraction(class Player &, class ItemInstance const &);
    MCVAPI enum class EventResult onPlayerItemUseInteraction(class Player &, class ItemInstance const &);
    MCVAPI enum class EventResult onPlayerMove(class Player &);
    MCVAPI enum class EventResult onPlayerMovementAnomaly(class Player &, class Vec3 const &, float, float);
    MCVAPI enum class EventResult onPlayerMovementCorrected(class Player &, class Vec3 const &, float, float);
    MCVAPI enum class EventResult onPlayerNamedItem(class Player &, class ItemDescriptor const &);
    MCVAPI enum class EventResult onPlayerOnGround(class Player &);
    MCVAPI enum class EventResult onPlayerOpenContainer(class Player &, enum class ContainerType, class BlockPos const &, struct ActorUniqueID);
    MCVAPI enum class EventResult onPlayerPiglinBarter(class Player &, std::string const &, bool);
    MCVAPI enum class EventResult onPlayerPortalBuilt(class Player &, class AutomaticID<class Dimension, int>);
    MCVAPI enum class EventResult onPlayerPortalUsed(class Player &, class AutomaticID<class Dimension, int>, class AutomaticID<class Dimension, int>);
    MCVAPI enum class EventResult onPlayerSaved(class Player &);
    MCVAPI enum class EventResult onPlayerSlide(class Player &);
    MCVAPI enum class EventResult onPlayerStartRiding(class Player &, class Actor &);
    MCVAPI enum class EventResult onPlayerStopRiding(class Player &, bool, bool, bool);
    MCVAPI enum class EventResult onPlayerTargetBlockHit(class Player &, int);
    MCVAPI enum class EventResult onPlayerTeleported(class Player &);
    MCVAPI enum class EventResult onPlayerTick(class Player &);
    MCVAPI enum class EventResult onPlayerTurn(class Player &, class Vec2 &);
    MCVAPI enum class EventResult onStartDestroyBlock(class Player &, class BlockPos const &, unsigned char &);
#endif

};