// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class DirectPlayerMovementProxy {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_DIRECTPLAYERMOVEMENTPROXY
public:
    class DirectPlayerMovementProxy& operator=(class DirectPlayerMovementProxy const &) = delete;
    DirectPlayerMovementProxy(class DirectPlayerMovementProxy const &) = delete;
    DirectPlayerMovementProxy() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_DIRECTPLAYERMOVEMENTPROXY
    MCVAPI std::unique_ptr<struct PlayerSnapshot> _createSnapshot();
    MCVAPI class Abilities const & _getAbilities() const;
    MCVAPI struct AdventureSettings const & _getAdventureSettings();
    MCVAPI std::vector<class MobEffectInstance> const & _getAllEffects() const;
    MCVAPI class Vec2 _getCurrentLocalMoveVelocity() const;
    MCVAPI class Player * _getPlayer();
    MCVAPI void _onMovePlayerPacketNormal(class Vec3 const &, class Vec2 const &, float);
    MCVAPI void _resetPos(bool);
    MCVAPI void _setPositionMode(int);
    MCVAPI bool areHandsBusy() const;
    MCVAPI bool checkMaterial(class AABB const &, enum class MaterialType);
    MCVAPI void checkMovementStats(class Vec3 const &);
    MCVAPI bool checkNeedAutoJump(float, float);
    MCVAPI void fireEventPersonaEmotePlayed();
    MCVAPI bool getAbilityBool(enum class AbilitiesIndex) const;
    MCVAPI float getAbilityFloat(enum class AbilitiesIndex) const;
    MCVAPI float getBob() const;
    MCVAPI struct IClientInstanceProxy const * getClientInstance() const;
    MCVAPI struct IClientInstanceProxy * getClientInstance();
    MCVAPI struct Tick const & getCurrentTick() const;
    MCVAPI int getGlidingTicks() const;
    MCVAPI enum class InputMode getInputMode() const;
    MCVAPI float getJumpRidingScale();
    MCVAPI float getLastBob() const;
    MCVAPI class Vec3 getLastDelta() const;
    MCVAPI class Vec3 getLastPos() const;
    MCVAPI enum class LoadingState getLoadingState() const;
    MCVAPI class Vec2 getLookBob() const;
    MCVAPI class MoveInputHandler * getMoveInputHandler();
    MCVAPI enum class ClientPlayMode getPlayMode() const;
    MCVAPI float getPlayerPaddleForce(enum class Side) const;
    MCVAPI float getVRMoveAdjustAngle() const;
    MCVAPI bool hasMoveInput();
    MCVAPI bool isAdventureSettingsAutoJump();
    MCVAPI bool isArmorFlyEnabled() const;
    MCVAPI bool isAutoJumpEnabled() const;
    MCVAPI bool isAutoJumping() const;
    MCVAPI bool isEmoting();
    MCVAPI bool isFlying() const;
    MCVAPI bool isLocalPlayer() const;
    MCVAPI bool isPaddling(enum class Side) const;
    MCVAPI bool isServerAuthoritativeMovement() const;
    MCVAPI bool isSleeping() const;
    MCVAPI bool isSlowedByItemUse() const;
    MCVAPI bool isUsingItem() const;
    MCVAPI void registerFramewiseActionOrStop();
    MCVAPI void sendAdventureSettingsPacket();
    MCVAPI void sendHeadRotation();
    MCVAPI void sendInput();
    MCVAPI void sendPacket(class PlayerActionPacket &);
    MCVAPI void sendPacket(class RiderJumpPacket &);
    MCVAPI void sendPlayerInput();
    MCVAPI void sendPlayerMove();
    MCVAPI void sendPosition();
    MCVAPI void setAbilityBool(enum class AbilitiesIndex, bool);
    MCVAPI void setAbilityFloat(enum class AbilitiesIndex, float);
    MCVAPI void setAutoJumping(bool);
    MCVAPI void setBob(float);
    MCVAPI void setCurrentLocalMoveVelocity(class Vec2 const &);
    MCVAPI void setEmotePlayedEndedEarly(bool);
    MCVAPI void setEmotingStatus(bool);
    MCVAPI void setHandsBusy(bool);
    MCVAPI void setHasMoveInput(bool);
    MCVAPI void setJumpRidingScale(float);
    MCVAPI void setLastBob(float);
    MCVAPI void setLastDelta(class Vec3 const &);
    MCVAPI void setLastLookBob(class Vec2 const &);
    MCVAPI void setLastPos(class Vec3 const &);
    MCVAPI void setLookBob(class Vec2 const &);
    MCVAPI void setPlayerPaddleForce(enum class Side, float);
    MCVAPI void setWasAutoJumping(bool);
    MCVAPI bool shouldSendPosition() const;
    MCVAPI void startGliding();
    MCVAPI void stopGliding();
    MCVAPI struct IPlayerMovementProxy * tryAsPlayer();
    MCVAPI class ReplayStateComponent * tryGetReplayComponent();
    MCVAPI void updateClientPlayerInputState();
    MCVAPI bool wasAutoJumping() const;
#endif

};