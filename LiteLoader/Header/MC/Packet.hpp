// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "ServerNetworkHandler.hpp"
#include "IPacketHandlerDispatcher.hpp"
class ReadOnlyBinaryStream;
class BinaryStream;
class ServerPlayer;
class NetworkIdentifier;
enum class StreamReadResult;
enum class PacketReliability : int {
    Reliable = 0x0,
    ReliableOrdered = 0x1,
    Unreliable = 0x2,
    UnreliableSequenced = 0x3,
};

enum class Compressibility : __int32 {
    Compressible = 0x0,
    Incompressible = 0x1,
};

enum class PacketPriority : int {
    IMMEDIATE_PRIORITY = 0x0,
    HIGH_PRIORITY = 0x1,
    MEDIUM_PRIORITY = 0x2,
    LOW_PRIORITY = 0x3,
    NUMBER_OF_PRIORITIES = 0x4,
};

#undef BEFORE_EXTRA

class __declspec(align(8)) Packet {

#define AFTER_EXTRA
    // Add Member There
public:
    PacketPriority mPriority = PacketPriority::MEDIUM_PRIORITY;
    PacketReliability mReliability = PacketReliability::ReliableOrdered;
    unsigned __int8 mClientSubId; 
    bool mIsHandled;
    const IPacketHandlerDispatcher* mHandler;
    Compressibility mCompressible;

//    inline Packet(unsigned compress)
//    : incompressible(!compress)
//    { }
#define DISABLE_CONSTRUCTOR_PREVENTION_PACKET
    inline Packet() {}
    class Packet& operator=(class Packet const&) = delete;
    Packet(class Packet const&) = delete;

    inline ServerPlayer* getPlayerFromPacket(ServerNetworkHandler* handler, NetworkIdentifier* netId)
    {
        return handler->getServerPlayer(*netId, dAccess<char>(this, 16));
    }
    inline enum class StreamReadResult _read(class ReadOnlyBinaryStream& binaryStream)
    {
        return read(binaryStream);
    }
protected:
    std::string toDebugString() {
        return fmt::format("{}({})->{}", getName(), getId(), mClientSubId);
    }
#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PACKET
public:
    class Packet& operator=(class Packet const &) = delete;
    Packet(class Packet const &) = delete;
    Packet() = delete;
#endif

public:
    /*0*/ virtual ~Packet();
    /*1*/ virtual enum class MinecraftPacketIds getId() const = 0;
    /*2*/ virtual std::string getName() const = 0;
    /*3*/ virtual void write(class BinaryStream &) const = 0;
    /*4*/ virtual enum class StreamReadResult read(class ReadOnlyBinaryStream &) = 0;
    /*5*/ virtual struct ExtendedStreamReadResult readExtended(class ReadOnlyBinaryStream &);
    /*6*/ virtual bool disallowBatching() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_PACKET
#endif

};