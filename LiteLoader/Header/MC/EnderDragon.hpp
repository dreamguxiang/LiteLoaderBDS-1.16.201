// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Monster.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class EnderDragon : public Monster {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ENDERDRAGON
public:
    class EnderDragon& operator=(class EnderDragon const &) = delete;
    EnderDragon(class EnderDragon const &) = delete;
    EnderDragon() = delete;
#endif

public:
    /*1*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*7*/ virtual ~EnderDragon();
    /*11*/ virtual void remove();
    /*32*/ virtual void __unk_vfn_32();
    /*55*/ virtual void __unk_vfn_55();
    /*62*/ virtual void __unk_vfn_62();
    /*75*/ virtual float getShadowRadius() const;
    /*76*/ virtual class Vec3 getHeadLookVector(float);
    /*77*/ virtual void __unk_vfn_77();
    /*82*/ virtual void __unk_vfn_82();
    /*86*/ virtual bool isImmobile() const;
    /*89*/ virtual void __unk_vfn_89();
    /*91*/ virtual void __unk_vfn_91();
    /*98*/ virtual void __unk_vfn_98();
    /*100*/ virtual void __unk_vfn_100();
    /*101*/ virtual void __unk_vfn_101();
    /*102*/ virtual void __unk_vfn_102();
    /*112*/ virtual void setSitting(bool);
    /*123*/ virtual void __unk_vfn_123();
    /*126*/ virtual bool isInvulnerableTo(class ActorDamageSource const &) const;
    /*134*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*170*/ virtual bool canChangeDimensions() const;
    /*171*/ virtual void __unk_vfn_171();
    /*182*/ virtual bool canBePulledIntoVehicle() const;
    /*184*/ virtual void __unk_vfn_184();
    /*199*/ virtual bool canBeAffected(class MobEffectInstance const &) const;
    /*208*/ virtual void __unk_vfn_208();
    /*209*/ virtual void __unk_vfn_209();
    /*230*/ virtual void __unk_vfn_230();
    /*233*/ virtual void __unk_vfn_233();
    /*241*/ virtual void __unk_vfn_241();
    /*243*/ virtual bool _hurt(class ActorDamageSource const &, int, bool, bool);
    /*249*/ virtual void __unk_vfn_249();
    /*259*/ virtual void _onSizeUpdated();
    /*260*/ virtual void __unk_vfn_260();
    /*281*/ virtual void aiStep();
    /*294*/ virtual void __unk_vfn_294();
    /*304*/ virtual void __unk_vfn_304();
    /*338*/ virtual void __unk_vfn_338();
    /*352*/ virtual void tickDeath();
    /*354*/ virtual void __unk_vfn_354();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ENDERDRAGON
    MCVAPI bool canExistInPeaceful() const;
    MCVAPI bool isFishable() const;
#endif
    MCAPI EnderDragon(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &);
    MCAPI void dieNaturally();
    MCAPI int findClosestNode();
    MCAPI int findClosestNode(class Vec3 const &);
    MCAPI std::unique_ptr<class Path> findPath(int, int, class PathfinderNode *);
    MCAPI class BlockPos getHeadPos() const;
    MCAPI std::vector<float> const getLatencyPos(int, float) const;
    MCAPI void onCrystalDestroyed(class EnderCrystal const &, class BlockPos, class ActorDamageSource const &);

//protected:
    MCAPI bool _hurt(class AABB *, class ActorDamageSource const &, float);

//private:
    MCAPI void checkCrystals();
    MCAPI bool checkWalls(class AABB);
    MCAPI float getHeadYOffset(float) const;
    MCAPI void hurtEntities(class gsl::span<class gsl::not_null<class Actor *>, -1>) const;
    MCAPI void knockBack(class gsl::span<class gsl::not_null<class Actor *>, -1>) const;
    MCAPI std::unique_ptr<class Path> reconstructPath(class PathfinderNode &, class PathfinderNode &, enum PathCompletionType);

protected:

private:
    MCAPI static int GROWL_INTERVAL_MAX;
    MCAPI static int GROWL_INTERVAL_MIN;
    MCAPI static int MAX_PATH_RADIUS;
    MCAPI static float SITTING_ALLOWED_DAMAGE_PERCENTAGE;

};