// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class ActorPlacerItem : public Item {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ACTORPLACERITEM
public:
    class ActorPlacerItem& operator=(class ActorPlacerItem const &) = delete;
    ActorPlacerItem(class ActorPlacerItem const &) = delete;
    ActorPlacerItem() = delete;
#endif

public:
    /*0*/ virtual ~ActorPlacerItem();
    /*2*/ virtual void tearDown();
    /*5*/ virtual void __unk_vfn_5();
    /*10*/ virtual void __unk_vfn_10();
    /*16*/ virtual void __unk_vfn_16();
    /*43*/ virtual void __unk_vfn_43();
    /*45*/ virtual void __unk_vfn_45();
    /*49*/ virtual bool isLiquidClipItem(int) const;
    /*50*/ virtual bool shouldInteractionWithBlockBypassLiquid(class Block const &) const;
    /*57*/ virtual void __unk_vfn_57();
    /*58*/ virtual bool isValidAuxValue(int) const;
    /*60*/ virtual void __unk_vfn_60();
    /*61*/ virtual void __unk_vfn_61();
    /*62*/ virtual void __unk_vfn_62();
    /*65*/ virtual void __unk_vfn_65();
    /*69*/ virtual void __unk_vfn_69();
    /*70*/ virtual void __unk_vfn_70();
    /*71*/ virtual struct ActorDefinitionIdentifier getActorIdentifier(class ItemStack const &) const;
    /*72*/ virtual void __unk_vfn_72();
    /*73*/ virtual void __unk_vfn_73();
    /*77*/ virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char) const;
    /*87*/ virtual std::string buildDescriptionId(class ItemDescriptor const &, class CompoundTag const *) const;
    /*101*/ virtual void __unk_vfn_101();
    /*102*/ virtual void __unk_vfn_102();
    /*110*/ virtual struct TextureUVCoordinateSet const & getIcon(class ItemStackBase const &, int, bool) const;
    /*117*/ virtual void __unk_vfn_117();
    /*123*/ virtual bool _useOn(class ItemStack &, class Actor &, class BlockPos, unsigned char, float, float, float) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ACTORPLACERITEM
    MCVAPI class mce::Color getBaseColor(class ItemStack const &) const;
    MCVAPI class mce::Color getSecondaryColor(class ItemStack const &) const;
    MCVAPI bool isActorPlacerItem() const;
    MCVAPI bool isMultiColorTinted(class ItemStack const &) const;
#endif
    MCAPI ActorPlacerItem(std::string const &, int, struct ActorDefinitionIdentifier const &);
    MCAPI static void forEachCustomEgg(class std::function<void (class Item const &)> const &);
    MCAPI static std::string getCustomSpawnEggName(int);
    MCAPI static void registerCustomEggs(class ActorInfoRegistry const &);
    MCAPI static class Actor * spawnOrMoveAgent(class Vec3 const &, class Actor &);

//private:
    MCAPI struct ActorDefinitionIdentifier _getActorID(class BlockSource &) const;
    MCAPI class Actor * _spawnActorAt(class BlockSource &, class Vec3 const &, class Vec3 const &, class ItemStack const &, class Actor *) const;

private:
    MCAPI static class std::unordered_map<unsigned int, std::string, struct std::hash<unsigned int>, struct std::equal_to<unsigned int>, class std::allocator<struct std::pair<unsigned int const, std::string>>> mCustomSpawnEggs;
    MCAPI static class std::unordered_map<class HashedString, struct TextureUVCoordinateSet, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, struct TextureUVCoordinateSet>>> mUVTextureMap;
    MCAPI static struct TextureUVCoordinateSet m_uvEggMask;

};