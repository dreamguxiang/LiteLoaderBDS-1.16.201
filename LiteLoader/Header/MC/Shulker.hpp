// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Mob.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class Shulker : public Mob {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SHULKER
public:
    class Shulker& operator=(class Shulker const &) = delete;
    Shulker(class Shulker const &) = delete;
    Shulker() = delete;
#endif

public:
    /*1*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*7*/ virtual ~Shulker();
    /*12*/ virtual void setPos(class Vec3 const &);
    /*32*/ virtual void __unk_vfn_32();
    /*40*/ virtual void normalTick();
    /*52*/ virtual bool isInWall() const;
    /*55*/ virtual void __unk_vfn_55();
    /*62*/ virtual void __unk_vfn_62();
    /*75*/ virtual float getShadowRadius() const;
    /*77*/ virtual void __unk_vfn_77();
    /*82*/ virtual void __unk_vfn_82();
    /*89*/ virtual void __unk_vfn_89();
    /*91*/ virtual void __unk_vfn_91();
    /*98*/ virtual void __unk_vfn_98();
    /*100*/ virtual void __unk_vfn_100();
    /*101*/ virtual void __unk_vfn_101();
    /*102*/ virtual void __unk_vfn_102();
    /*103*/ virtual bool canAttack(class Actor *, bool) const;
    /*123*/ virtual void __unk_vfn_123();
    /*125*/ virtual bool shouldRender() const;
    /*126*/ virtual bool isInvulnerableTo(class ActorDamageSource const &) const;
    /*135*/ virtual float getPickRadius();
    /*171*/ virtual void __unk_vfn_171();
    /*184*/ virtual void __unk_vfn_184();
    /*208*/ virtual void __unk_vfn_208();
    /*209*/ virtual void __unk_vfn_209();
    /*230*/ virtual void __unk_vfn_230();
    /*233*/ virtual void __unk_vfn_233();
    /*238*/ virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    /*241*/ virtual void __unk_vfn_241();
    /*243*/ virtual bool _hurt(class ActorDamageSource const &, int, bool, bool);
    /*245*/ virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    /*246*/ virtual void addAdditionalSaveData(class CompoundTag &);
    /*249*/ virtual void __unk_vfn_249();
    /*259*/ virtual void _onSizeUpdated();
    /*260*/ virtual void __unk_vfn_260();
    /*277*/ virtual void travel(float, float, float);
    /*281*/ virtual void aiStep();
    /*294*/ virtual void __unk_vfn_294();
    /*295*/ virtual float getMaxHeadXRot();
    /*304*/ virtual void __unk_vfn_304();
    /*309*/ virtual int getArmorValue();
    /*338*/ virtual void __unk_vfn_338();
    /*343*/ virtual std::unique_ptr<class BodyControl> initBodyControl();
    /*354*/ virtual void __unk_vfn_354();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SHULKER
    MCVAPI bool isLeashableType();
    MCVAPI bool useNewAi() const;
#endif
    MCAPI void calculateBB();
    MCAPI unsigned char getAttachFace() const;
    MCAPI bool getAttached() const;
    MCAPI bool isValidAttach(class BlockPos, unsigned char);
    MCAPI void setAttachFace(unsigned char);
    MCAPI void setPeekAmount(int);
    MCAPI void setShulkerAttachPos(class BlockPos);
    MCAPI static class std::shared_ptr<class AttributeModifier> COVERED_ARMOR_MODIFIER;
    MCAPI static class mce::UUID const COVERED_ARMOR_MODIFIER_UUID;

//protected:
    MCAPI bool teleportSomewhere();

protected:

};