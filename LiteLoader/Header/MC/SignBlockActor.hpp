// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockActor.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class SignBlockActor : public BlockActor {

#define AFTER_EXTRA
public:
    enum class SignType : int {
        Oak = 0x0,
        Spruce = 0x1,
        Birch = 0x2,
        Jungle = 0x3,
        Acacia = 0x4,
        DarkOak = 0x5,
        RedBigNetherShroom = 0x6,
        BlueBigNetherShroom = 0x7,
    };

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SIGNBLOCKACTOR
public:
    class SignBlockActor& operator=(class SignBlockActor const &) = delete;
    SignBlockActor(class SignBlockActor const &) = delete;
    SignBlockActor() = delete;
#endif

public:
    /*0*/ virtual ~SignBlockActor();
    /*1*/ virtual void load(class Level &, class CompoundTag const &, class DataLoadHelper &);
    /*2*/ virtual bool save(class CompoundTag &) const;
    /*9*/ virtual void onChanged(class BlockSource &);
    /*13*/ virtual void __unk_vfn_13();
    /*17*/ virtual void __unk_vfn_17();
    /*18*/ virtual float getShadowRadius(class BlockSource &) const;
    /*26*/ virtual std::string getImmersiveReaderText(class BlockSource &);
    /*29*/ virtual void __unk_vfn_29();
    /*30*/ virtual void __unk_vfn_30();
    /*32*/ virtual void __unk_vfn_32();
    /*33*/ virtual void __unk_vfn_33();
    /*34*/ virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource &);
    /*35*/ virtual void _onUpdatePacket(class CompoundTag const &, class BlockSource &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SIGNBLOCKACTOR
#endif
    MCAPI SignBlockActor(class BlockPos const &);
    MCAPI void setMessage(std::string, std::string);
    MCAPI void setMessage(class TextObjectRoot, std::string);

};