// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Animal.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class Horse : public Animal {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_HORSE
public:
    class Horse& operator=(class Horse const &) = delete;
    Horse(class Horse const &) = delete;
    Horse() = delete;
#endif

public:
    /*1*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*7*/ virtual ~Horse();
    /*28*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*32*/ virtual void __unk_vfn_32();
    /*40*/ virtual void normalTick();
    /*43*/ virtual void positionRider(class Actor &, float);
    /*55*/ virtual void __unk_vfn_55();
    /*62*/ virtual void __unk_vfn_62();
    /*75*/ virtual float getShadowRadius() const;
    /*77*/ virtual void __unk_vfn_77();
    /*82*/ virtual void __unk_vfn_82();
    /*86*/ virtual bool isImmobile() const;
    /*89*/ virtual void __unk_vfn_89();
    /*91*/ virtual void __unk_vfn_91();
    /*98*/ virtual void __unk_vfn_98();
    /*100*/ virtual void __unk_vfn_100();
    /*101*/ virtual void __unk_vfn_101();
    /*102*/ virtual void __unk_vfn_102();
    /*114*/ virtual void onFailedTame();
    /*118*/ virtual void setStanding(bool);
    /*123*/ virtual void __unk_vfn_123();
    /*133*/ virtual void feed(int);
    /*134*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*171*/ virtual void __unk_vfn_171();
    /*173*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*175*/ virtual void causeFallDamage(float);
    /*176*/ virtual void handleFallDistanceOnServer(float, bool);
    /*184*/ virtual void __unk_vfn_184();
    /*205*/ virtual void openContainerComponent(class Player &);
    /*208*/ virtual void __unk_vfn_208();
    /*209*/ virtual void __unk_vfn_209();
    /*230*/ virtual void __unk_vfn_230();
    /*233*/ virtual void __unk_vfn_233();
    /*235*/ virtual void die(class ActorDamageSource const &);
    /*241*/ virtual void __unk_vfn_241();
    /*243*/ virtual bool _hurt(class ActorDamageSource const &, int, bool, bool);
    /*247*/ virtual void _playStepSound(class BlockPos const &, class Block const &);
    /*249*/ virtual void __unk_vfn_249();
    /*260*/ virtual void __unk_vfn_260();
    /*268*/ virtual int getAmbientSoundPostponeTicks();
    /*277*/ virtual void travel(float, float, float);
    /*281*/ virtual void aiStep();
    /*294*/ virtual void __unk_vfn_294();
    /*304*/ virtual void __unk_vfn_304();
    /*309*/ virtual int getArmorValue();
    /*338*/ virtual void __unk_vfn_338();
    /*354*/ virtual void __unk_vfn_354();
    /*355*/ virtual void setType(int);
    /*356*/ virtual int getType() const;
    /*357*/ virtual void setHorseEating(bool);
    /*358*/ virtual float getEatAnim(float);
    /*359*/ virtual float getStandAnim(float) const;
    /*360*/ virtual float getMouthAnim(float);
    /*361*/ virtual bool canWearArmor() const;
    /*362*/ virtual bool getHasReproduced() const;
    /*363*/ virtual void setBred(bool);
    /*364*/ virtual void setReproduced(bool);
    /*365*/ virtual bool isAmuletHorse();
    /*366*/ virtual bool isUndead() const;
    /*367*/ virtual bool isSterile() const;
    /*368*/ virtual bool isAdult() const;
    /*369*/ virtual bool isHorseEating() const;
    /*370*/ virtual bool isBred() const;
    /*371*/ virtual void makeMad();
    /*372*/ virtual int nameYOffset();
    /*373*/ virtual bool tameToPlayer(class Player &, bool);
    /*374*/ virtual std::string getMadSound();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_HORSE
    MCVAPI bool useNewAi() const;
#endif
    MCAPI static int const DONKEY_CHEST_COUNT;

//private:
    MCAPI void openMouth();
    MCAPI void setHorseFlag(enum HorseFlags, bool);

private:

};