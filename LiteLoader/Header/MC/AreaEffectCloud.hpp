// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class AreaEffectCloud : public Actor {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_AREAEFFECTCLOUD
public:
    class AreaEffectCloud& operator=(class AreaEffectCloud const &) = delete;
    AreaEffectCloud(class AreaEffectCloud const &) = delete;
    AreaEffectCloud() = delete;
#endif

public:
    /*1*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*7*/ virtual ~AreaEffectCloud();
    /*32*/ virtual void __unk_vfn_32();
    /*40*/ virtual void normalTick();
    /*55*/ virtual void __unk_vfn_55();
    /*62*/ virtual void __unk_vfn_62();
    /*75*/ virtual float getShadowRadius() const;
    /*77*/ virtual void __unk_vfn_77();
    /*82*/ virtual void __unk_vfn_82();
    /*89*/ virtual void __unk_vfn_89();
    /*91*/ virtual void __unk_vfn_91();
    /*98*/ virtual void __unk_vfn_98();
    /*100*/ virtual void __unk_vfn_100();
    /*101*/ virtual void __unk_vfn_101();
    /*102*/ virtual void __unk_vfn_102();
    /*111*/ virtual void setOwner(struct ActorUniqueID);
    /*123*/ virtual void __unk_vfn_123();
    /*171*/ virtual void __unk_vfn_171();
    /*184*/ virtual void __unk_vfn_184();
    /*208*/ virtual void __unk_vfn_208();
    /*209*/ virtual void __unk_vfn_209();
    /*230*/ virtual void __unk_vfn_230();
    /*233*/ virtual void __unk_vfn_233();
    /*241*/ virtual void __unk_vfn_241();
    /*245*/ virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    /*246*/ virtual void addAdditionalSaveData(class CompoundTag &);
    /*249*/ virtual void __unk_vfn_249();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_AREAEFFECTCLOUD
#endif
    MCAPI int getDuration() const;
    MCAPI float getEffectiveRadius() const;
    MCAPI float getInitialRadius() const;
    MCAPI int getPickupCount() const;
    MCAPI void setDuration(int);
    MCAPI void setInitialRadius(float);
    MCAPI void setParticle(enum ParticleType);
    MCAPI void setParticleColor(class mce::Color &);
    MCAPI void setPickupCount(int);
    MCAPI void setPotion(short);
    MCAPI void setRadiusChangeOnPickup(float);
    MCAPI void setRadiusPerTick(float);

//private:
    MCAPI unsigned __int64 _getSpawnTick() const;
    MCAPI void _setSpawnTick(__int64);
    MCAPI void _spawnParticles(class Random &, unsigned int, float);

private:

};