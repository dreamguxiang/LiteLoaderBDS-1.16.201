// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class Minecraft {

#define AFTER_EXTRA
public:
    inline NetworkHandler & getNetworkHandler(){
        //lambda_b490644342a3912d59dc52eb79c3a67f_::operator() Line410
        return dAccess<NetworkHandler>(this,24);
    };
#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MINECRAFT
public:
    class Minecraft& operator=(class Minecraft const &) = delete;
    Minecraft(class Minecraft const &) = delete;
    Minecraft() = delete;
#endif

public:
    /*0*/ virtual class OwnerPtrT<struct EntityRegistryRefTraits> & getEntityRegistry();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_MINECRAFT
#endif
    MCAPI Minecraft(class IMinecraftApp &, class GameCallbacks &, class AllowList &, class PermissionsFile *, class Core::FilePathManager *, class std::chrono::duration<__int64, struct std::ratio<1, 1>>, class IMinecraftEventing &, class NetworkHandler &, class PacketSender &, unsigned char, class Timer &, class Timer &, class ContentTierManager const &, class ServerMetrics *);
    MCAPI void activateAllowList();
    MCAPI class Level * getLevel() const;
    MCAPI class ServerNetworkHandler * getServerNetworkHandler();
    MCAPI bool hostMultiplayer(std::string const &, std::unique_ptr<class Level>, class Player *, class mce::UUID const &, std::unique_ptr<class NetEventCallback>, int, bool, bool, std::vector<std::string> const &, std::string, struct ConnectionDefinition const &, class std::unordered_map<struct PackIdVersion, std::string, struct std::hash<struct PackIdVersion>, struct std::equal_to<struct PackIdVersion>, class std::allocator<struct std::pair<struct PackIdVersion const, std::string>>> const &, class Scheduler &, class TextFilteringProcessor *);
    MCAPI void init();
    MCAPI bool update();

//private:
    MCAPI void tickRealtime(int, int);

private:

};