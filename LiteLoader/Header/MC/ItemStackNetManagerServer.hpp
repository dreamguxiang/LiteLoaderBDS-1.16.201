// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "ItemStackNetManagerBase.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class ItemStackNetManagerServer : public ItemStackNetManagerBase {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ITEMSTACKNETMANAGERSERVER
public:
    class ItemStackNetManagerServer& operator=(class ItemStackNetManagerServer const &) = delete;
    ItemStackNetManagerServer(class ItemStackNetManagerServer const &) = delete;
    ItemStackNetManagerServer() = delete;
#endif

public:
    /*0*/ virtual ~ItemStackNetManagerServer();
    /*2*/ virtual class TypedClientNetId<struct ItemStackRequestIdTag, int, 0> getRequestId() const;
    /*3*/ virtual bool retainSetItemStackNetIdVariant() const;
    /*4*/ virtual bool allowInventoryTransactionManager() const;
    /*6*/ virtual void onContainerScreenOpen(class ContainerScreenContext const &);
    /*7*/ virtual void onContainerScreenClose();
    /*8*/ virtual class SparseContainer * initOpenContainer(class BlockSource &, enum ContainerEnumName, class ContainerWeakRef const &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ITEMSTACKNETMANAGERSERVER
#endif
    MCAPI void _handleLegacyTransactionRequest(class TypedClientNetId<struct ItemStackLegacyRequestIdTag, int, 0> const &, std::vector<struct std::pair<enum ContainerEnumName, class std::vector<unsigned char, class std::allocator<unsigned char>>>> const &);
    MCAPI class gsl::final_action<class std::function<void (void)>> _retainSetItemStackNetIdVariantScope();
    MCAPI void startCrafting(bool, class BlockPos const &);
    MCAPI class CallbackToken tryCloseContainerScreen(class std::function<void (void)>);

//private:
    MCAPI void _filterStrings(class TypedClientNetId<struct ItemStackRequestIdTag, int, 0>, std::vector<std::string> const &);
    MCAPI void _handleRequestData(std::vector<struct ItemStackResponseInfo> &, class ItemStackRequestData const *);
    MCAPI void _processQueue();
    MCAPI void _queueRequests(class ItemStackRequestBatch const &);
    MCAPI void _setTextFilterState(enum ItemStackNetManagerServer::TextFilterState);
    MCAPI bool _tryFilterText(class ItemStackRequestData const *);

private:

};